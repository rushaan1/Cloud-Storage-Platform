// <auto-generated />
using System;
using CloudStoragePlatform.Infrastructure.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CloudStoragePlatform.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250715094534_CreatedAtPropertyInUser")]
    partial class CreatedAtPropertyInUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.35")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CloudStoragePlatform.Core.Domain.Entities.File", b =>
                {
                    b.Property<Guid>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTrash")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParentFolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SharingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Size")
                        .HasColumnType("real");

                    b.HasKey("FileId");

                    b.HasIndex("MetadataId")
                        .IsUnique()
                        .HasFilter("[MetadataId] IS NOT NULL");

                    b.HasIndex("ParentFolderId");

                    b.HasIndex("SharingId")
                        .IsUnique()
                        .HasFilter("[SharingId] IS NOT NULL");

                    b.ToTable("Files", (string)null);
                });

            modelBuilder.Entity("CloudStoragePlatform.Core.Domain.Entities.Folder", b =>
                {
                    b.Property<Guid>("FolderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FolderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTrash")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MetadataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentFolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SharingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Size")
                        .HasColumnType("real");

                    b.HasKey("FolderId");

                    b.HasIndex("MetadataId")
                        .IsUnique()
                        .HasFilter("[MetadataId] IS NOT NULL");

                    b.HasIndex("ParentFolderId");

                    b.HasIndex("SharingId")
                        .IsUnique()
                        .HasFilter("[SharingId] IS NOT NULL");

                    b.ToTable("Folders", (string)null);

                    b.HasData(
                        new
                        {
                            FolderId = new Guid("9e2abd0a-94ac-43e2-a212-9dc9f7590447"),
                            CreationDate = new DateTime(2025, 7, 15, 15, 15, 34, 660, DateTimeKind.Local).AddTicks(9829),
                            FolderName = "home",
                            FolderPath = "C:\\CloudStoragePlatform\\home",
                            IsFavorite = false,
                            IsTrash = false,
                            Size = 0f
                        });
                });

            modelBuilder.Entity("CloudStoragePlatform.Core.Domain.Entities.Metadata", b =>
                {
                    b.Property<Guid>("MetadataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastOpened")
                        .HasColumnType("datetime2");

                    b.Property<int>("MoveCount")
                        .HasColumnType("int");

                    b.Property<int>("OpenCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PreviousMoveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PreviousPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PreviousRenameDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RenameCount")
                        .HasColumnType("int");

                    b.Property<int>("ShareCount")
                        .HasColumnType("int");

                    b.HasKey("MetadataId");

                    b.ToTable("Metadatasets", (string)null);
                });

            modelBuilder.Entity("CloudStoragePlatform.Core.Domain.Entities.Sharing", b =>
                {
                    b.Property<Guid>("SharingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CurrentShareLinkTimesSeen")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ShareLinkCreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ShareLinkExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShareLinkUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SharingId");

                    b.ToTable("Shares", (string)null);
                });

            modelBuilder.Entity("CloudStoragePlatform.Core.Domain.Entities.UserSession", b =>
                {
                    b.Property<Guid>("UserSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpirationDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("UserSessionId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("UserSessions", (string)null);
                });

            modelBuilder.Entity("CloudStoragePlatform.Core.Domain.IdentityEntites.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("CloudStoragePlatform.Core.Domain.IdentityEntites.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CloudStoragePlatform.Core.Domain.Entities.File", b =>
                {
                    b.HasOne("CloudStoragePlatform.Core.Domain.Entities.Metadata", "Metadata")
                        .WithOne("File")
                        .HasForeignKey("CloudStoragePlatform.Core.Domain.Entities.File", "MetadataId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CloudStoragePlatform.Core.Domain.Entities.Folder", "ParentFolder")
                        .WithMany("Files")
                        .HasForeignKey("ParentFolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudStoragePlatform.Core.Domain.Entities.Sharing", "Sharing")
                        .WithOne("File")
                        .HasForeignKey("CloudStoragePlatform.Core.Domain.Entities.File", "SharingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Metadata");

                    b.Navigation("ParentFolder");

                    b.Navigation("Sharing");
                });

            modelBuilder.Entity("CloudStoragePlatform.Core.Domain.Entities.Folder", b =>
                {
                    b.HasOne("CloudStoragePlatform.Core.Domain.Entities.Metadata", "Metadata")
                        .WithOne("Folder")
                        .HasForeignKey("CloudStoragePlatform.Core.Domain.Entities.Folder", "MetadataId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CloudStoragePlatform.Core.Domain.Entities.Folder", "ParentFolder")
                        .WithMany("SubFolders")
                        .HasForeignKey("ParentFolderId");

                    b.HasOne("CloudStoragePlatform.Core.Domain.Entities.Sharing", "Sharing")
                        .WithOne("Folder")
                        .HasForeignKey("CloudStoragePlatform.Core.Domain.Entities.Folder", "SharingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Metadata");

                    b.Navigation("ParentFolder");

                    b.Navigation("Sharing");
                });

            modelBuilder.Entity("CloudStoragePlatform.Core.Domain.Entities.UserSession", b =>
                {
                    b.HasOne("CloudStoragePlatform.Core.Domain.IdentityEntites.ApplicationUser", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("CloudStoragePlatform.Core.Domain.IdentityEntites.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CloudStoragePlatform.Core.Domain.IdentityEntites.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CloudStoragePlatform.Core.Domain.IdentityEntites.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("CloudStoragePlatform.Core.Domain.IdentityEntites.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudStoragePlatform.Core.Domain.IdentityEntites.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CloudStoragePlatform.Core.Domain.IdentityEntites.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CloudStoragePlatform.Core.Domain.Entities.Folder", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("SubFolders");
                });

            modelBuilder.Entity("CloudStoragePlatform.Core.Domain.Entities.Metadata", b =>
                {
                    b.Navigation("File");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("CloudStoragePlatform.Core.Domain.Entities.Sharing", b =>
                {
                    b.Navigation("File");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("CloudStoragePlatform.Core.Domain.IdentityEntites.ApplicationUser", b =>
                {
                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
