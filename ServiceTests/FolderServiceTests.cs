using AutoFixture;
using Castle.Core.Configuration;
using CloudStoragePlatform.Core.Domain.Entities;
using CloudStoragePlatform.Core.Domain.RepositoryContracts;
using CloudStoragePlatform.Core.DTO;
using CloudStoragePlatform.Core.Enums;
using CloudStoragePlatform.Core.Exceptions;
using CloudStoragePlatform.Core.ServiceContracts;
using CloudStoragePlatform.Core.Services;
using CloudStoragePlatform;
using FluentAssertions;
using Moq;
using NPOI;
using Org.BouncyCastle.Asn1.X509;
using System.Linq.Expressions;
using Xunit;
using System.Text.Json;
using NPOI.HPSF;
using Xunit.Abstractions;
namespace ServiceTests
{
    public class FolderServiceTests
    {
        private readonly IFoldersModificationService _foldersModificationService;
        private readonly IFoldersRetrievalService _foldersRetrievalService;

        private readonly IFixture _fixture;
        private readonly Mock<IFoldersRepository> _foldersRepositoryMock;
        private readonly Mock<IFilesRepository> _filesRepositoryMock;
        private readonly ITestOutputHelper _output;
        string initialPath = @"C:\CloudStoragePlatformUnitTests\home";

        public FolderServiceTests(ITestOutputHelper output) 
        {
            _fixture = new Fixture();
            // Limiting every single string generated by _fixture to have only <=50 characters which are valid windows directory names
            _fixture.Customize<string>(c => c.FromFactory(() => string.Concat(new string(Enumerable.Range(0, 50).Select(x => _fixture.Create<char>()).ToArray()).Split(Path.GetInvalidFileNameChars()))));
            _output = output;
            _foldersRepositoryMock = new Mock<IFoldersRepository>();
            _filesRepositoryMock = new Mock<IFilesRepository>();
            _foldersModificationService = new FoldersModificationService(_foldersRepositoryMock.Object, _filesRepositoryMock.Object);
            _foldersRetrievalService = new FoldersRetrievalService(_foldersRepositoryMock.Object, new Mock<Microsoft.Extensions.Configuration.IConfiguration>().Object);
        }

        #region FolderModificationService

        #region AddFolder
        [Fact]
        public async Task AddFolder_DuplicateFolder()
        {
            string newFolderName = _fixture.Create<string>();
            FolderAddRequest? folderAddRequest = new FolderAddRequest() { FolderName = newFolderName, FolderPath = Path.Combine(initialPath, newFolderName) };
            
            Directory.CreateDirectory(folderAddRequest.FolderPath);

            try
            {
                Func<Task> action = async () =>
                {
                    await _foldersModificationService.AddFolder(folderAddRequest);
                };
                await action.Should().ThrowAsync<DuplicateFolderException>();
            }
            finally 
            {
                Directory.Delete(folderAddRequest.FolderPath);
            }
        }


        [Fact]
        public async Task AddFolder_InvalidAddRequestPath()
        {
            string newFolderName = _fixture.Create<string>();
            FolderAddRequest? folderAddRequest = new FolderAddRequest() { FolderName = newFolderName, FolderPath = Path.Combine(_fixture.Create<string>(), newFolderName) };

            Func<Task> action = async () =>
            {
                await _foldersModificationService.AddFolder(folderAddRequest);
            };

            await action.Should().ThrowAsync<ArgumentException>();
        }

        // PLEASE USE DIRECTORY IN THE SERVICE TO CHECK IF THE PATH IS VALID

        [Fact]
        public async Task AddFolder_CorrectDetails()
        {
            string newFolderName = _fixture.Create<string>();
            FolderAddRequest? folderAddRequest = new FolderAddRequest() { FolderName = newFolderName, FolderPath = Path.Combine(initialPath, newFolderName) };
            Folder folder = new Folder() { FolderName = folderAddRequest.FolderName, FolderPath = folderAddRequest.FolderPath };

            _foldersRepositoryMock.Setup(f => f.AddFolder(It.IsAny<Folder>()))
                .ReturnsAsync(folder);

            FolderResponse folderResponse = await _foldersModificationService.AddFolder(folderAddRequest);
            bool folderExists = Directory.Exists(folderResponse.FolderPath);

            folderResponse.FolderId.Should().NotBeEmpty();
            folderResponse.FolderName.Should().Be(folder.FolderName);
            folderResponse.FolderPath.Should().Be(folder.FolderPath);
            folderExists.Should().BeTrue();
        }
        #endregion



        #region RenameFolder
        [Fact]
        public async Task RenameFolder_FolderDoesNotExists() 
        {
            FolderRenameRequest renameRequest = _fixture.Create<FolderRenameRequest>();

            _foldersRepositoryMock.Setup(f => f.GetFolderByFolderId(It.IsAny<Guid>()))
                .ReturnsAsync((Folder)null!);

            Func<Task> action = async () =>
            {
                await _foldersModificationService.RenameFolder(renameRequest);
            };

            await action.Should().ThrowAsync<ArgumentException>();
        }

        [Fact]
        public async Task RenameFolder_NewFolderNameAlreadyExists() 
        {
            string newFolderName = _fixture.Create<string>();
            string pathOfExistingFolderWithNewFolderName = Path.Combine(initialPath, newFolderName);



            string folderToBeRenamedsName = _fixture.Create<string>();
            string folderToBeRenamedsPath = Path.Combine(initialPath, folderToBeRenamedsName);

            FolderRenameRequest renameRequest = _fixture.Build<FolderRenameRequest>().With(frr=>frr.FolderNewName, newFolderName).Create(); 

            Folder folderToBeRenamed = new Folder() { FolderId = renameRequest.FolderId, FolderName = folderToBeRenamedsName, FolderPath = folderToBeRenamedsPath };

            Directory.CreateDirectory(pathOfExistingFolderWithNewFolderName);

            _foldersRepositoryMock.Setup(f => f.GetFolderByFolderId(It.IsAny<Guid>()))
                .ReturnsAsync(folderToBeRenamed);

            try
            {
                Func<Task> action = async () =>
                {
                    await _foldersModificationService.RenameFolder(renameRequest);
                };
                await action.Should().ThrowAsync<DuplicateFolderException>();
            }
            finally 
            {
                Directory.Delete(pathOfExistingFolderWithNewFolderName);
            }
        }

        [Fact]
        public async Task RenameFolder_SuccessfulRename() 
        {
            //Arrange
            string folderName = _fixture.Create<string>();
            string folderPath = Path.Combine(initialPath, folderName);

            FolderRenameRequest renameRequest = _fixture.Create<FolderRenameRequest>();// IF ERROR COMES HERE REGARDING INVALID DIRECTORY NAME IT MIGHT BE BECAUSE FIXTURE ISN'T RESPECTING THE CUSTOMIZATION OF STRING GENERATION WHEN GENERATING STRING PROPERTIES OF OBJECT
            Folder folder = new Folder() { FolderId = renameRequest.FolderId, FolderName = folderName, FolderPath = folderPath };
            Folder updated = new Folder() { FolderId = renameRequest.FolderId, FolderName = folderName, FolderPath = folderPath };
            updated.FolderName = renameRequest.FolderNewName;
            updated.FolderPath = folder.FolderPath.Replace(folder.FolderName, renameRequest.FolderNewName);
            Directory.CreateDirectory(folderPath);

            _foldersRepositoryMock.Setup(f => f.GetFolderByFolderId(It.IsAny<Guid>()))
                .ReturnsAsync(folder);

            _foldersRepositoryMock.Setup(f=> f.UpdateFolder(It.IsAny<Folder>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>()))
                .ReturnsAsync(updated);

            _filesRepositoryMock.Setup(f => f.UpdateFile(It.IsAny<CloudStoragePlatform.Core.Domain.Entities.File>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>()))
                .ReturnsAsync(new CloudStoragePlatform.Core.Domain.Entities.File() { FilePath = Path.Combine(folderPath, _fixture.Create<string>()) });
            // The service will check using Directory to see if folder with new name already exists 

            //Act
            _output.WriteLine($"SOURCE DIR: {folderPath}\nDESTINATION DIR: {updated.FolderPath}");
            FolderResponse response = await _foldersModificationService.RenameFolder(renameRequest);

            //Assert
            bool folderExists = Directory.Exists(Path.Combine(initialPath, renameRequest.FolderNewName));
            response.FolderId.Should().Be(renameRequest.FolderId);
            response.FolderName.Should().Be(renameRequest.FolderNewName);
            response.FolderPath.Should().Be(updated.FolderPath);
            folderExists.Should().BeTrue();
            Directory.Delete(response.FolderPath!);
        }
        #endregion



        #region MoveFolder
        [Fact]
        public async Task MoveFolder_FolderDoesntExists() 
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();

            string newFolderPath = _fixture.Create<string>();

            _foldersRepositoryMock.Setup(f=>f.GetFolderByFolderId(It.IsAny<Guid>()))
                .ReturnsAsync((Folder) null!);

            //Act
            Func<Task> action = async () =>
            {
                await _foldersModificationService.MoveFolder(guid, newFolderPath);
            };

            //Assert
            await action.Should().ThrowAsync<ArgumentException>();
        }



        [Fact]
        public async Task MoveFolder_InvalidNewFolderPath() 
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();
            string folderPath = _fixture.Create<string>();
            Folder folder = new Folder() { FolderId = guid, FolderPath = folderPath };

            string newFolderPath = _fixture.Create<string>();

            _foldersRepositoryMock.Setup(f => f.GetFolderByFolderId(It.IsAny<Guid>()))
                .ReturnsAsync(folder);

            //Act
            Func<Task> action = async () =>
            {
                await _foldersModificationService.MoveFolder(guid, newFolderPath);
            };

            //Assert
            await action.Should().ThrowAsync<DirectoryNotFoundException>();
        }



        [Fact]
        public async Task MoveFolder_DuplicateFolderInNewPath()
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();
            string folderName = _fixture.Create<string>();
            string folderPath = Path.Combine(initialPath, folderName);
            Folder folder = new Folder() { FolderId = guid, FolderName = folderName, FolderPath = folderPath };
            Directory.CreateDirectory(folderPath);

            string destinationDirectoryPath = Path.Combine(initialPath, _fixture.Create<string>());
            string newPathForFOLDER = Path.Combine(destinationDirectoryPath, folderName);
            Directory.CreateDirectory(destinationDirectoryPath);

            _foldersRepositoryMock.Setup(f => f.GetFolderByFolderId(It.IsAny<Guid>()))
                .ReturnsAsync(folder);

            //creating duplicate directory
            Directory.CreateDirectory(newPathForFOLDER);


            //Act
            Func<Task> action = async () =>
            {
                await _foldersModificationService.MoveFolder(guid, destinationDirectoryPath);
            };


            //Assert
            await action.Should().ThrowAsync<DuplicateFolderException>();
        }


        [Fact]
        public async Task MoveFolder_ChildPathProvided() 
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();
            string folderName = _fixture.Create<string>();
            string folderPath = Path.Combine(initialPath, folderName);
            Folder folder = new Folder() { FolderId = guid, FolderName = folderName, FolderPath = folderPath };
            Directory.CreateDirectory(folderPath);

            Guid childFolderGuid = _fixture.Create<Guid>();
            string childFolderName = _fixture.Create<string>();
            string childFolderPath = Path.Combine(folderPath, childFolderName);
            Folder childFolder = new Folder() { FolderId = childFolderGuid, FolderName = childFolderName, FolderPath = childFolderPath };
            childFolder.ParentFolder = folder;
            childFolder.ParentFolderId = folder.FolderId;
            Directory.CreateDirectory(childFolderPath);

            string destinationDirectoryPath = childFolderPath;
            Directory.CreateDirectory(destinationDirectoryPath);

            _foldersRepositoryMock.Setup(f => f.GetFolderByFolderId(It.IsAny<Guid>()))
                .ReturnsAsync(folder);
            _foldersRepositoryMock.Setup(f => f.GetFolderByFolderPath(It.IsAny<string>()))
                .ReturnsAsync(childFolder);

            //creating duplicate directory

            //Act
            Func<Task> action = async () =>
            {
                await _foldersModificationService.MoveFolder(guid, destinationDirectoryPath);
            };


            //Assert
            await action.Should().ThrowAsync<ArgumentException>();
        }

        [Fact]
        public async Task MoveFolder_NewPathHasSamePathAsFolderToBeMoved() 
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();
            string folderName = _fixture.Create<string>();
            string folderPath = Path.Combine(initialPath, folderName);
            Folder folder = new Folder() { FolderId = guid, FolderName = folderName, FolderPath = folderPath };
            Directory.CreateDirectory(folderPath);

            string destinationDirectoryPath = folder.FolderPath;

            _foldersRepositoryMock.Setup(f => f.GetFolderByFolderId(It.IsAny<Guid>()))
                .ReturnsAsync(folder);

            _foldersRepositoryMock.Setup(f => f.GetFolderByFolderPath(It.IsAny<string>()))
                .ReturnsAsync(folder);


            //Act
            Func<Task> action = async () =>
            {
                await _foldersModificationService.MoveFolder(guid, destinationDirectoryPath);
            };


            //Assert
            await action.Should().ThrowAsync<ArgumentException>();
        }



        [Fact]
        public async Task MoveFolder_SuccessfullyMoved() 
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();
            string folderName = _fixture.Create<string>();
            string folderPath = Path.Combine(initialPath, folderName);
            Folder folder = new Folder() { FolderId = guid, FolderName = folderName, FolderPath = folderPath };
            Directory.CreateDirectory(folderPath);

            string destinationDirectoryPath = Path.Combine(initialPath, _fixture.Create<string>());
            string newPathForFOLDER = Path.Combine(destinationDirectoryPath, folderName);

            CloudStoragePlatform.Core.Domain.Entities.File file1 = new CloudStoragePlatform.Core.Domain.Entities.File() { FileId = _fixture.Create<Guid>(), FileName = _fixture.Create<string>() + ".txt" };
            string subFilesPath1 = Path.Combine(folder.FolderPath, file1.FileName);
            file1.FilePath = subFilesPath1;
            folder.Files.Add(file1);
            using (System.IO.File.Create(subFilesPath1)) { }

            CloudStoragePlatform.Core.Domain.Entities.File file2 = new CloudStoragePlatform.Core.Domain.Entities.File() { FileId = _fixture.Create<Guid>(), FileName = _fixture.Create<string>() + ".txt" };
            string subFilesPath2 = Path.Combine(folder.FolderPath, file2.FileName);
            file2.FilePath = subFilesPath2;
            folder.Files.Add(file2);
            using (System.IO.File.Create(subFilesPath2)) { }

            Folder subFolder = new Folder() { FolderId = _fixture.Create<Guid>(), FolderName = _fixture.Create<string>() };
            subFolder.FolderPath = Path.Combine(folder.FolderPath, subFolder.FolderName);
            Directory.CreateDirectory(subFolder.FolderPath);
            folder.SubFolders.Add(subFolder);

            Folder updated = new Folder() { FolderId = guid, FolderName = folderName, FolderPath = folderPath };
            updated.FolderPath = newPathForFOLDER;

            Directory.CreateDirectory(destinationDirectoryPath);

            _foldersRepositoryMock.Setup(f => f.GetFolderByFolderId(It.IsAny<Guid>()))
                .ReturnsAsync(folder);
            _foldersRepositoryMock.Setup(f => f.UpdateFolder(It.IsAny<Folder>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>()))
                .ReturnsAsync(updated);

            _filesRepositoryMock.Setup(f => f.UpdateFile(It.IsAny<CloudStoragePlatform.Core.Domain.Entities.File>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>()))
                .ReturnsAsync(new CloudStoragePlatform.Core.Domain.Entities.File() { FilePath = Path.Combine(folderPath, _fixture.Create<string>()) });

            try
            {
                //Act
                FolderResponse response = await _foldersModificationService.MoveFolder(guid, destinationDirectoryPath);


                //Assert
                bool dirExists = Directory.Exists(newPathForFOLDER);
                bool subDirExists = Directory.Exists(Path.Combine(response.FolderPath!, subFolder.FolderName));
                _output.WriteLine($"RESPONSE FOLDER PATH: {response.FolderPath}\nSUBFOLDER FOLDERNAME: {subFolder.FolderName}");
                bool subFilesCheck = (Directory.EnumerateFiles(response.FolderPath!).Count() == 2);
                response.Should().NotBeNull();
                response.FolderId.Should().Be(guid);
                response.FolderName.Should().Be(folderName);
                response.FolderPath.Should().Be(newPathForFOLDER);
                dirExists.Should().BeTrue();
                subDirExists.Should().BeTrue();
                subFilesCheck.Should().BeTrue();
            }
            finally 
            {
                //Directory.Delete(destinationDirectoryPath);
            }
        }
        #endregion



        #region AddOrRemoveFavorite
        [Fact]
        public async Task AddOrRemoveFavorite_FolderDoesntExists() 
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();

            _foldersRepositoryMock.Setup(f => f.GetFolderByFolderId(It.IsAny<Guid>()))
                .ReturnsAsync((Folder) null!);

            //Act
            Func<Task> action = async () =>
            {
                await _foldersModificationService.AddOrRemoveFavorite(guid);
            };

            //Assert
            await action.Should().ThrowAsync<ArgumentException>();
        }


        [Fact]
        public async Task AddOrRemoveFavorite_AddedToFavSuccesfully() 
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();
            Folder folder = new Folder() { FolderId = guid, IsFavorite=false };
            _foldersRepositoryMock.Setup(f => f.GetFolderByFolderId(It.IsAny<Guid>()))
                .ReturnsAsync(folder); 

            Folder updated = new Folder() { FolderId = guid, IsFavorite = false };
            updated.IsFavorite = true;

            _foldersRepositoryMock.Setup(f => f.UpdateFolder(It.IsAny<Folder>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>()))
                .ReturnsAsync(updated);

            //Act
            FolderResponse fr = await _foldersModificationService.AddOrRemoveFavorite(guid);

            //Assert
            fr.FolderId.Should().Be(guid);
            fr.IsFavorite.Should().BeTrue();
        }


        [Fact]
        public async Task AddOrRemoveFavorite_RemovedFromFavSuccesfully() 
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();
            Folder folder = new Folder() { FolderId = guid, IsFavorite = true };
            _foldersRepositoryMock.Setup(f => f.GetFolderByFolderId(It.IsAny<Guid>()))
                .ReturnsAsync(folder);

            Folder updated = new Folder() { FolderId = guid, IsFavorite = true };
            updated.IsFavorite = false;
            _foldersRepositoryMock.Setup(f => f.UpdateFolder(It.IsAny<Folder>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>()))
                .ReturnsAsync(updated);

            //Act
            FolderResponse fr = await _foldersModificationService.AddOrRemoveFavorite(guid);

            //Assert
            fr.FolderId.Should().Be(guid);  
            fr.IsFavorite.Should().BeFalse();
        }
        #endregion



        #region AddOrRemoveTrash
        [Fact]
        public async Task AddOrRemoveTrash_FolderDoesntExists() 
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();
            _foldersRepositoryMock.Setup(f => f.GetFolderByFolderId(It.IsAny<Guid>()))
                .ReturnsAsync((Folder) null!);

            //Act
            Func<Task> action = async () =>
            {
                await _foldersModificationService.AddOrRemoveTrash(guid);
            };

            //Assert
            await action.Should().ThrowAsync<ArgumentException>();
        }


        [Fact]
        public async Task AddOrRemoveTrash_AddedToTrashSuccessfully() 
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();
            Folder folder = new Folder() { FolderId = guid, IsTrash = false };
            _foldersRepositoryMock.Setup(f => f.GetFolderByFolderId(It.IsAny<Guid>()))
                .ReturnsAsync(folder);

            Folder updated = new Folder() { FolderId = guid, IsTrash = false };
            updated.IsTrash = true;
            _foldersRepositoryMock.Setup(f => f.UpdateFolder(It.IsAny<Folder>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>()))
                .ReturnsAsync(updated);

            //Act
            FolderResponse fr = await _foldersModificationService.AddOrRemoveTrash(guid);

            //Assert
            fr.FolderId.Should().Be(guid);
            fr.IsTrash.Should().BeTrue();
        }


        [Fact]
        public async Task AddOrRemoveTrash_RemovedFromTrashSuccessfully() 
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();
            Folder folder = new Folder() { FolderId = guid, IsTrash = true };
            _foldersRepositoryMock.Setup(f => f.GetFolderByFolderId(It.IsAny<Guid>()))
                .ReturnsAsync(folder);

            Folder updated = new Folder() { FolderId = guid, IsTrash = true };
            updated.IsTrash = false;
            _foldersRepositoryMock.Setup(f => f.UpdateFolder(It.IsAny<Folder>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>()))
                .ReturnsAsync(updated);

            //Act
            FolderResponse fr = await _foldersModificationService.AddOrRemoveTrash(guid);

            //Assert
            fr.FolderId.Should().Be(guid);
            fr.IsTrash.Should().BeFalse();
        }
        #endregion



        #region DeleteFolder
        [Fact]
        public async Task DeleteFolder_FolderDoesntExists() 
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();
            _foldersRepositoryMock.Setup(f => f.GetFolderByFolderId(It.IsAny<Guid>()))
                .ReturnsAsync((Folder) null!);

            //Act
            Func<Task> action = async () =>
            {
                await _foldersModificationService.DeleteFolder(guid);
            };

            //Assert
            await action.Should().ThrowAsync<ArgumentException>();
        }


        [Fact]
        public async Task DeleteFolder_FolderDeletedSuccessfully()
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();
            string folderName = _fixture.Create<string>();
            string folderPath = Path.Combine(initialPath, folderName);
            Folder folder = new Folder() { FolderId = guid, FolderName = folderName, FolderPath = folderPath};
            
            _foldersRepositoryMock.Setup(f => f.GetFolderByFolderId(It.IsAny<Guid>()))
                .ReturnsAsync(folder);
            _foldersRepositoryMock.Setup(f => f.DeleteFolder(It.IsAny<Folder>()))
                .ReturnsAsync(true);

            Directory.CreateDirectory(folderPath);
            using (System.IO.File.Create(Path.Combine(folderPath, _fixture.Create<string>() + ".txt"))) {}

                try
                {
                    //Act
                    bool deleted = await _foldersModificationService.DeleteFolder(guid);

                    //Assert
                    deleted.Should().BeTrue();
                    Directory.EnumerateDirectories(initialPath).Should().BeEmpty();
                    Directory.EnumerateFiles(initialPath).Should().BeEmpty();
                }
                catch (Exception)
                {
                    Directory.Delete(folderPath, true);
                }
        }
        #endregion
        #endregion







        #region FoldersRetrievalService

        #region GetFoldersByFolderId
        [Fact]
        public async Task GetFolderByFolderId_FolderNotFound() 
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();
            _foldersRepositoryMock.Setup(f => f.GetFolderByFolderId(It.IsAny<Guid>()))
                .ReturnsAsync((Folder) null!);

            //Act
            FolderResponse? folderResponse = await _foldersRetrievalService.GetFolderByFolderId(guid);

            //Assert
            folderResponse.Should().BeNull();
        }
        [Fact]
        public async Task GetFolderByFolderId_Success()
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();
            Folder folder = new Folder() { FolderId = guid };
            _foldersRepositoryMock.Setup(f => f.GetFolderByFolderId(It.IsAny<Guid>()))
                .ReturnsAsync(folder);

            //Act
            FolderResponse fr = await _foldersRetrievalService.GetFolderByFolderId(guid);

            //Assert
            fr.Should().NotBeNull();
            fr.FolderId.Should().Be(guid);
        }
        #endregion

        #region GetFolderByFolderPath
        [Fact]
        public async Task GetFolderByFolderPath_FolderNotFound()
        {
            // Arrange
            string path = _fixture.Create<string>();
            _foldersRepositoryMock.Setup(f => f.GetFolderByFolderPath(It.IsAny<string>()))
                .ReturnsAsync((Folder)null!);

            // Act
            FolderResponse? folderResponse = await _foldersRetrievalService.GetFolderByFolderPath(path);


            // Assert
            folderResponse.Should().BeNull();
        }

        [Fact]
        public async Task GetFolderByFolderPath_Success()
        {
            // Arrange
            string name = _fixture.Create<string>();
            string path = Path.Combine(initialPath, name);
            Folder folder = new Folder() { FolderId = _fixture.Create<Guid>(), FolderPath = path };
            _foldersRepositoryMock.Setup(f => f.GetFolderByFolderPath(It.IsAny<string>()))
                .ReturnsAsync(folder);
            Directory.CreateDirectory(path);

            try
            {
                // Act
                FolderResponse fr = await _foldersRetrievalService.GetFolderByFolderPath(path);

                // Assert
                fr.Should().NotBeNull();
                fr.FolderId.Should().Be(folder.FolderId);
                fr.FolderPath.Should().Be(path);
            }
            finally 
            {
                Directory.Delete(path);
            }
        }
        #endregion

        #region GetAllFoldersInHomeFolder
        [Fact] 
        public async Task GetAllFoldersInHomeFolder_NoFoldersFound_ReturnsEmptyList()
        {
            // Arrange
            var sortOptions = SortOrderOptions.ALPHABETICAL;
            _foldersRepositoryMock.Setup(f => f.GetFolderByFolderPath(It.IsAny<string>()))
                .ReturnsAsync(new Folder());

            // Act
            List<FolderResponse> result = await _foldersRetrievalService.GetAllFoldersInHomeFolder(sortOptions);

            // Assert
            result.Should().NotBeNull();
            result.Should().BeEmpty();
        }

        [Fact]
        public async Task GetAllFoldersInHomeFolder_Success_Alphabetical()
        {
            // Arrange
            var sortOptions = SortOrderOptions.ALPHABETICAL;
            
            var folders = new List<Folder>
            {
                new Folder { FolderId = _fixture.Create<Guid>(), FolderName = "A", FolderPath = Path.Combine(initialPath, "A") },
                new Folder { FolderId = _fixture.Create<Guid>(), FolderName = "B", FolderPath = Path.Combine(initialPath, "B") }
            };
            Folder homeFolder = new Folder() {FolderId=_fixture.Create<Guid>(), FolderPath=initialPath, SubFolders=folders};

            _foldersRepositoryMock.Setup(f => f.GetFolderByFolderPath(It.IsAny<string>()))
                .ReturnsAsync(homeFolder);

            // Act
            List<FolderResponse> result = await _foldersRetrievalService.GetAllFoldersInHomeFolder(sortOptions);

            // Assert
            result.Should().NotBeNull();
            result.Should().HaveCount(2);
            result[0].FolderName.Should().Be("A");
            result[1].FolderName.Should().Be("B");
        }

        [Fact]
        public async Task GetAllFoldersInHomeFolder_Success_Size()
        {
            // Arrange
            var sortOptions = SortOrderOptions.SIZE;
            
            var folders = new List<Folder>
    {
        new Folder { FolderId = _fixture.Create<Guid>(), FolderName = "SmallFolder", FolderPath = Path.Combine(initialPath, "Small"), Metadata = new Metadata(){ Size = 1024 } },
        new Folder { FolderId = _fixture.Create<Guid>(), FolderName = "BigFolder", FolderPath = Path.Combine(initialPath, "Big"), Metadata =  new Metadata(){ Size = 2048 } }
    };
            Folder homeFolder = new Folder() { FolderId = _fixture.Create<Guid>(), FolderPath = initialPath, SubFolders = folders };

            _foldersRepositoryMock.Setup(f => f.GetFolderByFolderPath(It.IsAny<string>()))
                .ReturnsAsync(homeFolder);

            // Act
            List<FolderResponse> result = await _foldersRetrievalService.GetAllFoldersInHomeFolder(sortOptions);

            // Assert
            result.Should().NotBeNull();
            result.Should().HaveCount(2);
            result[0].FolderName.Should().Be("SmallFolder");
            result[1].FolderName.Should().Be("BigFolder");
        }

        #endregion

        #region GetAllSubFolders
        [Fact]
        public async Task GetAllSubFolders_FolderDoesntExists()
        {
            // Arrange
            var sortOptions = SortOrderOptions.ALPHABETICAL;
            _foldersRepositoryMock.Setup(f => f.GetFolderByFolderId(It.IsAny<Guid>()))
                .ReturnsAsync((Folder) null!);

            // Act
            Func<Task> action = async () => 
            {
                List<FolderResponse> result = await _foldersRetrievalService.GetAllSubFolders(_fixture.Create<Guid>(), sortOptions);
            };

            // Assert
            await action.Should().ThrowAsync<ArgumentException>();
        }

        [Fact] 
        public async Task GetAllSubFolders_NoSubFolders()
        {
            // Arrange
            var sortOptions = SortOrderOptions.ALPHABETICAL;
            var folder = new Folder() { FolderId = _fixture.Create<Guid>() };
            _foldersRepositoryMock.Setup(f => f.GetFolderByFolderId(It.IsAny<Guid>()))
                .ReturnsAsync(folder);

            // Act
            List<FolderResponse> result = await _foldersRetrievalService.GetAllSubFolders(folder.FolderId, sortOptions);

            // Assert
            result.Should().NotBeNull();
            result.Should().BeEmpty();
        }

        [Fact]
        public async Task GetAllSubFolders_Success_AlphabeticalAscending()
        {
            // Arrange
            var sortOptions = SortOrderOptions.ALPHABETICAL;
            
            var folders = new List<Folder>
            {
                new Folder { FolderId = _fixture.Create<Guid>(), FolderName = "A", FolderPath = Path.Combine(initialPath, "A") },
                new Folder { FolderId = _fixture.Create<Guid>(), FolderName = "B", FolderPath = Path.Combine(initialPath, "B") }
            };
            Folder folder = new Folder() { FolderId = _fixture.Create<Guid>(), FolderPath = initialPath, SubFolders = folders };

            _foldersRepositoryMock.Setup(f => f.GetFolderByFolderId(It.IsAny<Guid>()))
                .ReturnsAsync(folder);

            // Act
            List<FolderResponse> result = await _foldersRetrievalService.GetAllSubFolders(folder.FolderId, sortOptions);

            // Assert
            result.Should().NotBeNull();
            result.Should().HaveCount(2);
            result[0].FolderName.Should().Be("A");
            result[1].FolderName.Should().Be("B");
        }

        #endregion

        #region GetFilteredFolders
        [Fact]
        public async Task GetFilteredFolders_FolderDoesntExists()
        {
            var sortOptions = SortOrderOptions.ALPHABETICAL;
            _foldersRepositoryMock.Setup(f => f.GetFilteredFolders(It.IsAny<Expression<Func<Folder, bool>>>()))
                .ReturnsAsync(new List<Folder>());

            // Act
            List<FolderResponse> result = await _foldersRetrievalService.GetFilteredFolders(_fixture.Create<string>(), sortOptions);

            // Assert
            result.Should().BeEmpty();
        }

        [Fact]
        public async Task GetFilteredFolders_FolderSearchSuccessful()
        {
            // Arrange
            var sortOptions = SortOrderOptions.ALPHABETICAL;

            var filteredFolders = new List<Folder>
            {
                new Folder { FolderId = _fixture.Create<Guid>(), FolderName = "Abx", FolderPath = Path.Combine(initialPath, "Abx") },
                new Folder { FolderId = _fixture.Create<Guid>(), FolderName = "Abc", FolderPath = Path.Combine(initialPath, "Abc") },
            };
            _foldersRepositoryMock.Setup(f => f.GetFilteredFolders(It.IsAny<Expression<Func<Folder, bool>>>()))
                .ReturnsAsync(filteredFolders);

            // Act
            //Should be case insensitive & search folder name
            List<FolderResponse> result = await _foldersRetrievalService.GetFilteredFolders("ab", sortOptions);

            // Assert
            result[0].FolderName.Should().Be(filteredFolders[1].FolderName);
            result[1].FolderName.Should().Be(filteredFolders[0].FolderName);
            result.Count.Should().Be(2);
        }

        #endregion

        #region GetMetadata
        [Fact]
        public async Task GetMetadata_InvalidFolderId() 
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();
            _foldersRepositoryMock.Setup(f => f.GetFolderByFolderId(It.IsAny<Guid>()))
                .ReturnsAsync((Folder)null!);

            //Act
            Func<Task> action = async () =>
            {
                await _foldersRetrievalService.GetMetadata(guid);
            };

            //Assert
            await action.Should().ThrowAsync<ArgumentException>();
        }

        [Fact]
        public async Task GetMetadata_Successful()
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();
            Metadata metadata = new Metadata() 
            {
                MetadataId = _fixture.Create<Guid>(),
            };
            Folder folder = new Folder { FolderId = _fixture.Create<Guid>(), FolderName = "Abx", FolderPath = Path.Combine(initialPath, "Abx"), Metadata = metadata, MetadataId = metadata.MetadataId };
            metadata.Folder = folder;
            _foldersRepositoryMock.Setup(f => f.GetFolderByFolderId(It.IsAny<Guid>()))
                .ReturnsAsync(folder);

            //Act
            MetadataResponse mr = await _foldersRetrievalService.GetMetadata(folder.FolderId);

            //Assert
            mr.Should().NotBeNull();
            mr.MetadataId.Should().Be((Guid)folder.MetadataId);
        }
        #endregion
        #endregion
    }
}