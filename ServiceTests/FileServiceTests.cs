using AutoFixture;
using CloudStoragePlatform.Core;
using CloudStoragePlatform.Core.Domain.Entities;
using CloudStoragePlatform.Core.Domain.RepositoryContracts;
using CloudStoragePlatform.Core.DTO;
using CloudStoragePlatform.Core.Enums;
using CloudStoragePlatform.Core.Exceptions;
using CloudStoragePlatform.Core.ServiceContracts;
using CloudStoragePlatform.Core.Services;
using FluentAssertions;
using Moq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;
using Xunit.Abstractions;
using File = CloudStoragePlatform.Core.Domain.Entities.File;

namespace ServiceTests
{
    public class FileServiceTests
    {
        private readonly IFilesModificationService _filesModificationService;
        private readonly IFilesRetrievalService _filesRetrievalService;
        private readonly Mock<IFoldersRepository> _foldersRepositoryMock;

        private readonly IFixture _fixture;
        private readonly Mock<IFilesRepository> _filesRepositoryMock;

        private readonly ITestOutputHelper _output;
        string initialPath = @"C:\CloudStoragePlatformUnitTests\home";

        public FileServiceTests(ITestOutputHelper output)
        {
            _fixture = new Fixture();
            // Limiting every single string generated by _fixture to have only <=50 characters which are valid for file system names, since this is file service test, it appends .dat format for testing purposes
            _fixture.Customize<string>(c => c.FromFactory(() => string.Concat(new string(Enumerable.Range(0, 50).Select(x => _fixture.Create<char>()).ToArray()).Split(Path.GetInvalidFileNameChars()))+".dat"));
            _output = output;
            _filesRepositoryMock = new Mock<IFilesRepository>();
            _foldersRepositoryMock = new Mock<IFoldersRepository>();
            _filesModificationService = new FileModificationService(_foldersRepositoryMock.Object, _filesRepositoryMock.Object);
            _filesRetrievalService = new FileRetrievalService(_filesRepositoryMock.Object, new Mock<Microsoft.Extensions.Configuration.IConfiguration>().Object);
        }

        private Stream CreateNewTestFile(string path) 
        {
            byte[] data = { 0x41, 0x42, 0x43 };
            byte[] buffer = new byte[data.Length];
            using (FileStream fs = new FileStream(path, FileMode.Create, FileAccess.ReadWrite))
            {
                fs.Write(data, 0, data.Length);
                fs.Seek(0, SeekOrigin.Begin);
                fs.Read(buffer, 0, buffer.Length);
            }
            return new MemoryStream(buffer);
        }

        #region FileModificationService
        #region UploadFile
        [Fact]
        public async Task UploadFile_DuplicateFile()
        {
            string newFileName = _fixture.Create<string>();
            FileAddRequest? fileAddRequest = new FileAddRequest() { FileName = newFileName, FilePath = Path.Combine(initialPath, newFileName) };
            Stream stream = CreateNewTestFile(fileAddRequest.FilePath);

            try
            {
                Func<Task> action = async () =>
                {
                    await _filesModificationService.UploadFile(fileAddRequest, stream);
                };
                await action.Should().ThrowAsync<DuplicateFileException>();
            }
            finally
            {
                System.IO.File.Delete(fileAddRequest.FilePath);
            }
        }


        [Fact]
        public async Task UploadFile_InvalidAddRequestPath()
        {
            string newFileName = _fixture.Create<string>();
            FileAddRequest? fileAddRequest = new FileAddRequest() { FileName = newFileName, FilePath = Path.Combine(_fixture.Create<string>(), newFileName) };

            Func<Task> action = async () =>
            {
                await _filesModificationService.UploadFile(fileAddRequest, new MemoryStream());
            };

            await action.Should().ThrowAsync<ArgumentException>();
        }

        [Fact]
        public async Task UploadFile_CorrectDetails()
        {
            string newFileName = _fixture.Create<string>();
            FileAddRequest? fileAddRequest = new FileAddRequest() { FileName = newFileName, FilePath = Path.Combine(initialPath, newFileName) };
            
            File file = new File() { FileName = fileAddRequest.FileName, FilePath = fileAddRequest.FilePath };

            _filesRepositoryMock.Setup(f => f.AddFile(It.IsAny<File>()))
                .ReturnsAsync(file);
            _foldersRepositoryMock.Setup(f => f.GetFolderByFolderPath(It.IsAny<string>()))
                .ReturnsAsync(new Folder());

            FileResponse fileResponse = await _filesModificationService.UploadFile(fileAddRequest, CreateNewTestFile(Path.Combine(initialPath, "temp")));
            bool fileExists = System.IO.File.Exists(fileResponse.FilePath);

            fileResponse.FileId.Should().NotBeEmpty();
            fileResponse.FileName.Should().Be(file.FileName);
            fileResponse.FilePath.Should().Be(file.FilePath);
            fileExists.Should().BeTrue();
        }
        #endregion


        #region RenameFile
        [Fact]
        public async Task RenameFile_FileDoesNotExists()
        {
            FileRenameRequest renameRequest = _fixture.Create<FileRenameRequest>();

            _filesRepositoryMock.Setup(f => f.GetFileByFileId(It.IsAny<Guid>()))
                .ReturnsAsync((File)null!);

            Func<Task> action = async () =>
            {
                await _filesModificationService.RenameFile(renameRequest);
            };

            await action.Should().ThrowAsync<ArgumentException>();
        }

        [Fact]
        public async Task RenameFile_NewFileNameAlreadyExists()
        {
            string newFileName = _fixture.Create<string>();
            string pathOfExistingFileWithNewFileName = Path.Combine(initialPath, newFileName);



            string fileToBeRenamedsName = _fixture.Create<string>();
            string fileToBeRenamedsPath = Path.Combine(initialPath, fileToBeRenamedsName);

            FileRenameRequest renameRequest = _fixture.Build<FileRenameRequest>().With(frr => frr.FileNewName, newFileName).Create();

            File fileToBeRenamed = new File() { FileId = renameRequest.FileId, FileName = fileToBeRenamedsName, FilePath = fileToBeRenamedsPath };

            CreateNewTestFile(pathOfExistingFileWithNewFileName);

            _filesRepositoryMock.Setup(f => f.GetFileByFileId(It.IsAny<Guid>()))
                .ReturnsAsync(fileToBeRenamed);

            try
            {
                Func<Task> action = async () =>
                {
                    await _filesModificationService.RenameFile(renameRequest);
                };
                await action.Should().ThrowAsync<DuplicateFileException>();
            }
            finally
            {
                System.IO.File.Delete(pathOfExistingFileWithNewFileName);
            }
        }

        [Fact]
        public async Task RenameFile_SuccessfulRename()
        {
            //Arrange
            string fileName = _fixture.Create<string>();
            string filePath = Path.Combine(initialPath, fileName);

            FileRenameRequest renameRequest = _fixture.Create<FileRenameRequest>();// IF ERROR COMES HERE REGARDING INVALID DIRECTORY NAME IT MIGHT BE BECAUSE FIXTURE ISN'T RESPECTING THE CUSTOMIZATION OF STRING GENERATION WHEN GENERATING STRING PROPERTIES OF OBJECT

            File file = new File() { FileId = renameRequest.FileId, FileName = fileName, FilePath = filePath };
            Utilities.AttachMetadataForTesting(_fixture, null, file);
            File updated = new File() { FileId = renameRequest.FileId, FileName = fileName, FilePath = filePath };
            updated.FileName = renameRequest.FileNewName;
            updated.FilePath = file.FilePath.Replace(file.FileName, renameRequest.FileNewName);
            CreateNewTestFile(filePath);

            _filesRepositoryMock.Setup(f => f.GetFileByFileId(It.IsAny<Guid>()))
                .ReturnsAsync(file);

            _filesRepositoryMock.Setup(f => f.UpdateFile(It.IsAny<File>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>()))
                .ReturnsAsync(updated);

            FileResponse response = await _filesModificationService.RenameFile(renameRequest);

            //Assert
            bool folderExists = System.IO.File.Exists(Path.Combine(initialPath, renameRequest.FileNewName));
            response.FileId.Should().Be(renameRequest.FileId);
            response.FileName.Should().Be(renameRequest.FileNewName);
            response.FilePath.Should().Be(updated.FilePath);
            folderExists.Should().BeTrue();
            System.IO.File.Delete(response.FilePath!);
        }
        #endregion


        #region MoveFile
        [Fact]
        public async Task MoveFile_FileDoesntExists()
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();

            string newFilePath = _fixture.Create<string>();

            _filesRepositoryMock.Setup(f => f.GetFileByFileId(It.IsAny<Guid>()))
                .ReturnsAsync((File)null!);

            //Act
            Func<Task> action = async () =>
            {
                await _filesModificationService.MoveFile(guid, newFilePath);
            };

            //Assert
            await action.Should().ThrowAsync<ArgumentException>();
        }



        [Fact]
        public async Task MoveFile_InvalidNewFilePath()
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();
            string filePath = _fixture.Create<string>();
            File file = new File() { FileId = guid, FilePath = filePath };

            string newFilePath = _fixture.Create<string>();

            _filesRepositoryMock.Setup(f => f.GetFileByFileId(It.IsAny<Guid>()))
                .ReturnsAsync(file);

            //Act
            Func<Task> action = async () =>
            {
                await _filesModificationService.MoveFile(guid, newFilePath);
            };

            //Assert
            await action.Should().ThrowAsync<DirectoryNotFoundException>();
        }



        [Fact]
        public async Task MoveFile_DuplicateFileInNewPath()
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();
            string fileName = _fixture.Create<string>();
            string filePath = Path.Combine(initialPath, fileName);
            File file = new File() { FileId = guid, FileName = fileName, FilePath = filePath };
            CreateNewTestFile(file.FilePath);

            string destinationDirectoryPath = Path.Combine(initialPath, _fixture.Create<string>());
            string newPathForFile = Path.Combine(destinationDirectoryPath, fileName);
            Directory.CreateDirectory(destinationDirectoryPath);

            _filesRepositoryMock.Setup(f => f.GetFileByFileId(It.IsAny<Guid>()))
                .ReturnsAsync(file);

            //creating duplicate directory
            CreateNewTestFile(newPathForFile);


            //Act
            Func<Task> action = async () =>
            {
                await _filesModificationService.MoveFile(guid, destinationDirectoryPath);
            };


            //Assert
            await action.Should().ThrowAsync<DuplicateFileException>();
        }

        [Fact]
        public async Task MoveFile_NewPathHasSamePathAsFileToBeMoved()
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();
            string fileName = _fixture.Create<string>();
            string filePath = Path.Combine(initialPath, fileName);
            File file = new File() { FileId = guid, FileName = fileName, FilePath = filePath };
            CreateNewTestFile(filePath);

            string destinationDirectoryPath = initialPath;

            _filesRepositoryMock.Setup(f => f.GetFileByFileId(It.IsAny<Guid>()))
                .ReturnsAsync(file);

            _filesRepositoryMock.Setup(f => f.GetFileByFilePath(It.IsAny<string>()))
                .ReturnsAsync(file);
            // like would need to mock folders repository here instead


            //Act
            Func<Task> action = async () =>
            {
                await _filesModificationService.MoveFile(guid, destinationDirectoryPath);
            };


            //Assert
            await action.Should().ThrowAsync<ArgumentException>();
        }



        [Fact]
        public async Task MoveFile_SuccessfullyMoved()
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();
            string fileName = _fixture.Create<string>();
            string filePath = Path.Combine(initialPath, fileName);

            File file = new File() { FileId = guid, FileName = fileName, FilePath = filePath };
            
            Utilities.AttachMetadataForTesting(_fixture, null, file);
            
            CreateNewTestFile(filePath);

            string destinationDirectoryPath = Path.Combine(initialPath, _fixture.Create<string>());
            string newPathForFile = Path.Combine(destinationDirectoryPath, fileName);
            Directory.CreateDirectory(destinationDirectoryPath);

            File updated = new File() { FileId = guid, FileName = fileName, FilePath = filePath };
            updated.FilePath = newPathForFile;

            _filesRepositoryMock.Setup(f => f.GetFileByFileId(It.IsAny<Guid>()))
                .ReturnsAsync(file);
            _filesRepositoryMock.Setup(f => f.UpdateFile(It.IsAny<File>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>()))
                .ReturnsAsync(updated);

            //Act
            FileResponse response = await _filesModificationService.MoveFile(guid, destinationDirectoryPath);


            //Assert
            bool fileExists = System.IO.File.Exists(newPathForFile);
            response.Should().NotBeNull();
            response.FileId.Should().Be(guid);
            response.FileName.Should().Be(fileName);
            response.FilePath.Should().Be(newPathForFile);
            fileExists.Should().BeTrue();
        }
        #endregion


        #region AddOrRemoveFavorite
        [Fact]
        public async Task AddOrRemoveFavorite_FileDoesntExists()
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();

            _filesRepositoryMock.Setup(f => f.GetFileByFileId(It.IsAny<Guid>()))
                .ReturnsAsync((File)null!);

            //Act
            Func<Task> action = async () =>
            {
                await _filesModificationService.AddOrRemoveFavorite(guid);
            };

            //Assert
            await action.Should().ThrowAsync<ArgumentException>();
        }


        [Fact]
        public async Task AddOrRemoveFavorite_AddedToFavSuccesfully()
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();
            File file = new File() { FileId = guid, IsFavorite = false };
            _filesRepositoryMock.Setup(f => f.GetFileByFileId(It.IsAny<Guid>()))
                .ReturnsAsync(file);

            File updated = new File() { FileId = guid, IsFavorite = false };
            updated.IsFavorite = true;

            _filesRepositoryMock.Setup(f => f.UpdateFile(It.IsAny<File>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>()))
                .ReturnsAsync(updated);

            //Act
            FileResponse fr = await _filesModificationService.AddOrRemoveFavorite(guid);

            //Assert
            fr.FileId.Should().Be(guid);
            fr.IsFavorite.Should().BeTrue();
        }


        [Fact]
        public async Task AddOrRemoveFavorite_RemovedFromFavSuccesfully()
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();
            File file = new File() { FileId = guid, IsFavorite = true };
            _filesRepositoryMock.Setup(f => f.GetFileByFileId(It.IsAny<Guid>()))
                .ReturnsAsync(file);

            File updated = new File() { FileId = guid, IsFavorite = true };
            updated.IsFavorite = false;
            _filesRepositoryMock.Setup(f => f.UpdateFile(It.IsAny<File>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>()))
                .ReturnsAsync(updated);

            //Act
            FileResponse fr = await _filesModificationService.AddOrRemoveFavorite(guid);

            //Assert
            fr.FileId.Should().Be(guid);
            fr.IsFavorite.Should().BeFalse();
        }
        #endregion



        #region AddOrRemoveTrash
        [Fact]
        public async Task AddOrRemoveTrash_FileDoesntExists()
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();
            _filesRepositoryMock.Setup(f => f.GetFileByFileId(It.IsAny<Guid>()))
                .ReturnsAsync((File)null!);

            //Act
            Func<Task> action = async () =>
            {
                await _filesModificationService.AddOrRemoveTrash(guid);
            };

            //Assert
            await action.Should().ThrowAsync<ArgumentException>();
        }


        [Fact]
        public async Task AddOrRemoveTrash_AddedToTrashSuccessfully()
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();
            File file = new File() { FileId = guid, IsTrash = false };
            _filesRepositoryMock.Setup(f => f.GetFileByFileId(It.IsAny<Guid>()))
                .ReturnsAsync(file);

            File updated = new File() { FileId = guid, IsTrash = false };
            updated.IsTrash = true;
            _filesRepositoryMock.Setup(f => f.UpdateFile(It.IsAny<File>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>()))
                .ReturnsAsync(updated);

            //Act
            FileResponse fr = await _filesModificationService.AddOrRemoveTrash(guid);

            //Assert
            fr.FileId.Should().Be(guid);
            fr.IsTrash.Should().BeTrue();
        }


        [Fact]
        public async Task AddOrRemoveTrash_RemovedFromTrashSuccessfully()
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();
            File file = new File() { FileId = guid, IsTrash = true };
            _filesRepositoryMock.Setup(f => f.GetFileByFileId(It.IsAny<Guid>()))
                .ReturnsAsync(file);

            File updated = new File() { FileId = guid, IsTrash = true };
            updated.IsTrash = false;
            _filesRepositoryMock.Setup(f => f.UpdateFile(It.IsAny<File>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>(), It.IsAny<bool>()))
                .ReturnsAsync(updated);

            //Act
            FileResponse fr = await _filesModificationService.AddOrRemoveTrash(guid);

            //Assert
            fr.FileId.Should().Be(guid);
            fr.IsTrash.Should().BeFalse();
        }
        #endregion



        #region DeleteFolder
        [Fact]
        public async Task DeleteFile_FileDoesntExists()
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();
            _filesRepositoryMock.Setup(f => f.GetFileByFileId(It.IsAny<Guid>()))
                .ReturnsAsync((File)null!);

            //Act
            Func<Task> action = async () =>
            {
                await _filesModificationService.DeleteFile(guid);
            };

            //Assert
            await action.Should().ThrowAsync<ArgumentException>();
        }


        [Fact]
        public async Task DeleteFile_FileDeletedSuccessfully()
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();
            string fileName = _fixture.Create<string>();
            string filePath = Path.Combine(initialPath, fileName);
            File file = new File() { FileId = guid, FileName = fileName, FilePath = filePath };

            _filesRepositoryMock.Setup(f => f.GetFileByFileId(It.IsAny<Guid>()))
                .ReturnsAsync(file);
            _filesRepositoryMock.Setup(f => f.DeleteFile(It.IsAny<File>()))
                .ReturnsAsync(true);

            CreateNewTestFile(filePath);

            try
            {
                //Act
                bool deleted = await _filesModificationService.DeleteFile(guid);

                //Assert
                deleted.Should().BeTrue();
                Directory.EnumerateDirectories(initialPath).Should().BeEmpty();
            }
            catch (Exception)
            {
                System.IO.File.Delete(filePath);
            }
        }
        #endregion

        #endregion

        #region FilesRetrievalService

        #region GetFilesByFileId
        [Fact]
        public async Task GetFileByFileId_FileNotFound()
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();
            _filesRepositoryMock.Setup(f => f.GetFileByFileId(It.IsAny<Guid>()))
                .ReturnsAsync((CloudStoragePlatform.Core.Domain.Entities.File)null!);

            //Act
            FileResponse? FileResponse = await _filesRetrievalService.GetFileByFileId(guid);

            //Assert
            FileResponse.Should().BeNull();
        }
        [Fact]
        public async Task GetFileByFileId_Success()
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();
            CloudStoragePlatform.Core.Domain.Entities.File file = new CloudStoragePlatform.Core.Domain.Entities.File() { FileId = guid };
            _filesRepositoryMock.Setup(f => f.GetFileByFileId(It.IsAny<Guid>()))
                .ReturnsAsync(file);

            //Act
            FileResponse fr = await _filesRetrievalService.GetFileByFileId(guid);

            //Assert
            fr.Should().NotBeNull();
            fr.FileId.Should().Be(guid);
        }
        #endregion

        #region GetFileByFilePath
        [Fact]
        public async Task GetFileByFilePath_fileNotFound()
        {
            // Arrange
            string path = _fixture.Create<string>();
            _filesRepositoryMock.Setup(f => f.GetFileByFilePath(It.IsAny<string>()))
                .ReturnsAsync((CloudStoragePlatform.Core.Domain.Entities.File)null!);

            // Act
            FileResponse? FileResponse = await _filesRetrievalService.GetFileByFilePath(path);


            // Assert
            FileResponse.Should().BeNull();
        }

        [Fact]
        public async Task GetFileByFilePath_Success()
        {
            // Arrange
            string name = _fixture.Create<string>();
            string path = Path.Combine(initialPath, name);
            CloudStoragePlatform.Core.Domain.Entities.File file = new CloudStoragePlatform.Core.Domain.Entities.File() { FileId = _fixture.Create<Guid>(), FilePath = path };
            _filesRepositoryMock.Setup(f => f.GetFileByFilePath(It.IsAny<string>()))
                .ReturnsAsync(file);
            // Act
            FileResponse fr = await _filesRetrievalService.GetFileByFilePath(path);

            // Assert
            fr.Should().NotBeNull();
            fr.FileId.Should().Be(file.FileId);
            fr.FilePath.Should().Be(path);
        }
        #endregion

        #region GetMetadata
        [Fact]
        public async Task GetMetadata_InvalidFileId()
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();
            _filesRepositoryMock.Setup(f => f.GetFileByFileId(It.IsAny<Guid>()))
                .ReturnsAsync((CloudStoragePlatform.Core.Domain.Entities.File)null!);

            //Act
            Func<Task> action = async () =>
            {
                await _filesRetrievalService.GetMetadata(guid);
            };

            //Assert
            await action.Should().ThrowAsync<ArgumentException>();
        }

        [Fact]
        public async Task GetMetadata_Successful()
        {
            //Arrange
            Guid guid = _fixture.Create<Guid>();
            Metadata metadata = new Metadata()
            {
                MetadataId = _fixture.Create<Guid>(),
            };
            File file = new File { FileId = _fixture.Create<Guid>(), FileName = "Abx", FilePath = Path.Combine(initialPath, "Abx"), Metadata = metadata, MetadataId = metadata.MetadataId };
            file.ParentFolder = new Folder() { FolderName = _fixture.Create<string>() };
            metadata.File = file;
            _filesRepositoryMock.Setup(f => f.GetFileByFileId(It.IsAny<Guid>()))
                .ReturnsAsync(file);

            //Act
            FileOrFolderMetadataResponse mr = await _filesRetrievalService.GetMetadata(file.FileId);

            //Assert
            mr.Should().NotBeNull();
            mr.MetadataId.Should().Be((Guid)file.MetadataId);
        }
        #endregion
        #endregion
    }
}
